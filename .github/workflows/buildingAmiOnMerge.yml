name: Build AMI after PR Merge

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main # Assuming your primary branch is named 'main'
  push:
      branches:
        - main

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      

      - name: Setup envirornment variables
        run: |
          touch .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo =${{ secrets.PGHOST }} >> .env
          echo PGHOST=${{ secrets.PGHOST }} >> .env
          echo PGDATABASE=${{ secrets.PGDATABASE}} >> .env
          echo PGUSER=${{ secrets.PGUSER }} >> .env
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env

      - name: Create Application Artifact
        run: |
         mkdir artifacts
         zip -r artifacts/webapp.zip . -x "*.git*"


      - name: Install Packer
        run: |
          PACKER_VERSION="1.9.4"  # Specify your desired version
          wget https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip packer_${PACKER_VERSION}_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Initialize Packer
        run: packer init debian12.pkr.hcl

      - name: Build Custom AMI
        id: ami_build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          packer build debian12.pkr.hcl 2>&1 | sudo tee output.txt
          AMI_ID=$(grep 'artifact,0,id' output.txt | cut -d, -f6 | cut -d: -f2)          

      - name: Store AMI ID
        run: echo "AMI_ID=${{ steps.ami_build.outputs.AMI_ID }}" >> $GITHUB_ENV

      - name: Print AMI ID
        run: echo "${{ env.AMI_ID }}"
